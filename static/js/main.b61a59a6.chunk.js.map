{"version":3,"sources":["theme/colors.js","theme/index.js","App.js","serviceWorker.js","index.js"],"names":["brandColors","gradientColors","accentColors","primaryColors","successColors","warningColors","errorColors","grayscaleColors","theme","colors","text","gray900","background","white","primary","blue","secondary","greentea","accent","magenta","muted","gray700","space","fontSizes","body","h1","h2","h3","h4","h5","h6","fontWeights","heading","bold","fonts","sansSerif","mono","radii","square","round","breakpoints","shadows","customCodefiTheme","CodefiTheme","buttons","position","bg","color","height","px","py","border","borderRadius","lineHeight","fontWeight","App","console","log","className","p","sx","mb","width","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b61a59a6.chunk.js","sourcesContent":["var brandColors;\n(function (brandColors) {\n    brandColors[\"blue\"] = \"#1A5AFE\";\n    brandColors[\"pink\"] = \"#F82495\";\n    brandColors[\"greentea\"] = \"#C0F188\";\n    brandColors[\"yellow\"] = \"#FBD448\";\n    brandColors[\"cyan\"] = \"#3BE3DB\";\n    brandColors[\"white\"] = \"#ffffff\";\n})(brandColors || (brandColors = {}));\nvar gradientColors;\n(function (gradientColors) {\n    gradientColors[\"gradient1\"] = \"linear-gradient(173.21deg, #1A5AFE 17.68%, #3BE3DB 86.46%)\";\n    gradientColors[\"gradient2\"] = \"linear-gradient(90deg, rgba(248, 36, 149, 0) 37.5%, #FBD448 100%), linear-gradient(173.21deg, #2C56DD 53.66%, #F82495 100%)\";\n    gradientColors[\"gradient3\"] = \"linear-gradient(90deg, #1A5AFE 12.5%, #3BE3DB 74.99%, #C0F188 100%)\";\n    gradientColors[\"gradient4\"] = \"linear-gradient(173.21deg, #1A5AFE 26.52%, #F82495 91.16%)\";\n})(gradientColors || (gradientColors = {}));\nvar accentColors;\n(function (accentColors) {\n    accentColors[\"magenta\"] = \"#D73184\";\n    accentColors[\"amethyst\"] = \"#AE4BCB\";\n    accentColors[\"blurple\"] = \"#6367EB\";\n    accentColors[\"pine\"] = \"#2F837E\";\n    accentColors[\"terracotta\"] = \"#D88E1F\";\n})(accentColors || (accentColors = {}));\n// This would get changed for different primary colors/themes\nvar primaryColors;\n(function (primaryColors) {\n    primaryColors[\"primary100\"] = \"#F0F5FF\";\n    primaryColors[\"primary200\"] = \"#E5F1FF\";\n    primaryColors[\"primary300\"] = \"#B2D2FF\";\n    primaryColors[\"primary400\"] = \"#8CBCFF\";\n    primaryColors[\"primary500\"] = \"#6699FF\";\n    primaryColors[\"primary600\"] = \"#4D79FF\";\n    primaryColors[\"primary700\"] = \"#1A5AFE\";\n    primaryColors[\"primary800\"] = \"#0041E5\";\n    primaryColors[\"primary900\"] = \"#001146\";\n})(primaryColors || (primaryColors = {}));\nvar successColors;\n(function (successColors) {\n    successColors[\"success100\"] = \"#F2FCF6\";\n    successColors[\"success200\"] = \"#DFF2EA\";\n    successColors[\"success300\"] = \"#B8E6D3\";\n    successColors[\"success400\"] = \"#85CCAF\";\n    successColors[\"success500\"] = \"#69BFA0\";\n    successColors[\"success600\"] = \"#4BA687\";\n    successColors[\"success700\"] = \"#008055\";\n    successColors[\"success800\"] = \"#007350\";\n    successColors[\"success900\"] = \"#006647\";\n})(successColors || (successColors = {}));\nvar warningColors;\n(function (warningColors) {\n    warningColors[\"warning100\"] = \"#FFF8ED\";\n    warningColors[\"warning200\"] = \"#FFF1D9\";\n    warningColors[\"warning300\"] = \"#FFDEA6\";\n    warningColors[\"warning400\"] = \"#F7CE88\";\n    warningColors[\"warning500\"] = \"#F2BC61\";\n    warningColors[\"warning600\"] = \"#D9992B\";\n    warningColors[\"warning700\"] = \"#BF7900\";\n    warningColors[\"warning800\"] = \"#AC6300\";\n    warningColors[\"warning900\"] = \"#994D00\";\n})(warningColors || (warningColors = {}));\nvar errorColors;\n(function (errorColors) {\n    errorColors[\"error100\"] = \"#FCF5F5\";\n    errorColors[\"error200\"] = \"#FAEBEB\";\n    errorColors[\"error300\"] = \"#F2CECE\";\n    errorColors[\"error400\"] = \"#EBABAB\";\n    errorColors[\"error500\"] = \"#E58989\";\n    errorColors[\"error600\"] = \"#CC5252\";\n    errorColors[\"error700\"] = \"#B20000\";\n    errorColors[\"error800\"] = \"#A50000\";\n    errorColors[\"error900\"] = \"#990000\";\n})(errorColors || (errorColors = {}));\nvar grayscaleColors;\n(function (grayscaleColors) {\n    grayscaleColors[\"gray000\"] = \"#FBFBFC\";\n    grayscaleColors[\"gray100\"] = \"#F8F8F9\";\n    grayscaleColors[\"gray200\"] = \"#F0F0F2\";\n    grayscaleColors[\"gray300\"] = \"#DFE0E5\";\n    grayscaleColors[\"gray400\"] = \"#C2C4CC\";\n    grayscaleColors[\"gray500\"] = \"#989CA6\";\n    grayscaleColors[\"gray600\"] = \"#777C8C\";\n    grayscaleColors[\"gray700\"] = \"#475166\";\n    grayscaleColors[\"gray800\"] = \"#1A2233\";\n    grayscaleColors[\"gray900\"] = \"#000A28\";\n})(grayscaleColors || (grayscaleColors = {}));\nexport { brandColors, gradientColors, accentColors, primaryColors, successColors, warningColors, errorColors, grayscaleColors };\n//# sourceMappingURL=colors.js.map","import {\n  brandColors,\n  gradientColors,\n  accentColors,\n  primaryColors,\n  successColors,\n  warningColors,\n  errorColors,\n  grayscaleColors\n} from \"./colors\";\nconst theme = {\n  colors: {\n    ...brandColors,\n    ...gradientColors,\n    ...accentColors,\n    ...primaryColors,\n    ...successColors,\n    ...warningColors,\n    ...errorColors,\n    ...grayscaleColors,\n    // Set highly reusable, app-specific values\n    text: grayscaleColors.gray900,\n    background: brandColors.white,\n    primary: brandColors.blue,\n    secondary: brandColors.greentea,\n    accent: accentColors.magenta,\n    muted: grayscaleColors.gray700\n  },\n  space: [0, 4, 8, 12, 16, 20, 24, 32, 40, 64, 128, 256, 512],\n  // fontSizes: [12, 14, 16, 20, 24, 32, 48, 64], // do we want to use scales for everything, or only when it makes sense? Named values would obviously be easier to remember and easier to extend without needing to refactor.\n  // fontSizes.body: fontSizes[2], // We can't follow the guidance of styled-system's aliases due to Typescript error\n  fontSizes: {\n    //   bodySmaller: 12,\n    //   bodySmall: 14,\n    body: 16,\n    //   bodyLarge: 20,\n    //   bodyLarger: 24,\n    h1: 48,\n    // h1mobile: 42,\n    h2: 32,\n    h3: 24,\n    h4: 20,\n    h5: 16,\n    h6: 14\n  },\n  // fontWeights: [400, 500, 700],\n  fontWeights: {\n    body: 400,\n    heading: 500,\n    bold: 700\n  },\n  fonts: {\n    sansSerif: 'Inter, \"Helvetica Neue\", Arial, sans-serif',\n    mono: 'Monaco, Consolas, \"Lucida Console\", monospace'\n  },\n  // radii: [0, 4],\n  radii: {\n    square: 0,\n    round: 4\n  },\n  breakpoints: [\"40em\", \"52em\", \"64em\"],\n  // breakpoints: {\n  //     small: \"40em\",\n  //     medium: \"52em\",\n  //     large: \"64em\"\n  // },\n  shadows: [\n    // would we keep shadows as a scale? Are there any clearer descriptive words that we could use?\n    \"0\",\n    \"0px 2px 4px rgba(0, 0, 0, 0.1)\",\n    \"0px 4px 8px rgba(0, 0, 0, 0.1)\",\n    \"0px 6px 12px rgba(0, 0, 0, 0.1)\",\n    \"0px 8px 16px rgba(0, 0, 0, 0.1)\",\n    \"0px 10px 20px rgba(0, 0, 0, 0.1)\",\n    \"0px 12px 24px rgba(0, 0, 0, 0.1)\"\n  ]\n};\nexport default theme;\n//# sourceMappingURL=index.js.map\n","/** @jsx jsx */\nimport { jsx, Box, Button, ThemeProvider } from \"theme-ui\";\nimport CodefiTheme from \"./theme\";\n\nconst customCodefiTheme = {\n  ...CodefiTheme,\n  buttons: {\n    primary: {\n      position: \"relative\",\n      bg: \"primary700\",\n      color: \"white\",\n\n      height: \"auto\",\n      px: 6,\n      py: 3,\n      border: \"none\",\n      borderRadius: \"4px\",\n\n      lineHeight: \"24px\",\n      fontWeight: \"bold\",\n\n      \"&:hover\": {\n        bg: \"primary800\"\n      },\n      \"&:active\": {\n        bg: \"primary900\"\n      },\n      \"&:disabled\": {\n        bg: \"primary400\"\n      }\n    }\n  }\n};\n\nfunction App() {\n  console.log(\"Theme\", CodefiTheme);\n  return (\n    <ThemeProvider theme={customCodefiTheme} className={\"app\"}>\n      <Box p={8} sx={{ mb: 4 }} width=\"400px\">\n        <Button>I am a styled from the theme!</Button>\n        <Button disabled>Disabled :-(</Button>\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}