{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","colors","text","background","primary","black","white","blacks","whites","space","fontSizes","fontWeights","body","heading","lineHeights","fonts","sansSerif","mono","buttons","position","bg","color","height","px","py","border","borderRadius","lineHeight","fontWeight","App","className","p","sx","mb","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAoBMA,EAAQ,CACZC,OAAQ,CACNC,KAAM,OACNC,WAAY,OACZC,QAAS,UACTC,MAAO,OACPC,MAAO,OACPC,OAAQ,CACN,oBACA,mBACA,kBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,kBAEFC,OAAQ,CACN,0BACA,yBACA,wBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,yBAGJC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IACrCC,UAAW,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxCC,YAAa,CACXC,KAAM,IACNC,QAAS,KAEXC,YAAa,CACXF,KAAM,IACNC,QAAS,GAEXE,MAAO,CAELC,UAAW,0CACXC,KAAM,iDAERC,QAAS,CACPd,QAAS,CACPe,SAAU,WACVC,GAAI,UACJC,MAAO,QAEPC,OAAQ,OACRC,GAAI,EACJC,GAAI,EACJC,OAAQ,OACRC,aAAc,MAEdC,WAAY,OACZC,WAAY,OAEZ,UAAW,CACTR,GAAI,WAgBGS,MAVf,WACE,OACE,YAAC,IAAD,CAAe7B,MAAOA,EAAO8B,UAAW,OACtC,YAAC,IAAD,CAAKC,EAAG,EAAGC,GAAI,CAAEC,GAAI,GAAKC,MAAM,SAC9B,YAAC,IAAD,yCCrFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1bd7d885.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, Box, Button, ThemeProvider } from \"theme-ui\";\n\n// These are the defaultProps that are used for Codefi\n// Button.defaultProps = {\n//   position: 'relative',\n\n//   mainColor: 'primary',\n//   contrastColor: 'white',\n\n//   height: 'auto',\n//   px: 6,\n//   py: 3,\n//   border: 'none',\n//   borderRadius: '4px',\n\n//   lineHeight: '24px',\n//   fontWeight: '600',\n// }\n\nconst theme = {\n  colors: {\n    text: \"#000\",\n    background: \"#fff\",\n    primary: \"#1A5AFE\",\n    black: \"#000\",\n    white: \"#fff\",\n    blacks: [\n      \"rgba(0,0,0,.0125)\",\n      \"rgba(0,0,0,.025)\",\n      \"rgba(0,0,0,.05)\",\n      \"rgba(0,0,0,.1)\",\n      \"rgba(0,0,0,.2)\",\n      \"rgba(0,0,0,.3)\",\n      \"rgba(0,0,0,.4)\",\n      \"rgba(0,0,0,.5)\",\n      \"rgba(0,0,0,.6)\",\n      \"rgba(0,0,0,.7)\",\n      \"rgba(0,0,0,.8)\",\n      \"rgba(0,0,0,.9)\"\n    ],\n    whites: [\n      \"rgba(255,255,255,.0125)\",\n      \"rgba(255,255,255,.025)\",\n      \"rgba(255,255,255,.05)\",\n      \"rgba(255,255,255,.1)\",\n      \"rgba(255,255,255,.2)\",\n      \"rgba(255,255,255,.3)\",\n      \"rgba(255,255,255,.4)\",\n      \"rgba(255,255,255,.5)\",\n      \"rgba(255,255,255,.6)\",\n      \"rgba(255,255,255,.7)\",\n      \"rgba(255,255,255,.8)\",\n      \"rgba(255,255,255,.9)\"\n    ]\n  },\n  space: [0, 4, 8, 12, 16, 20, 24, 32, 40],\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64],\n  fontWeights: {\n    body: 400,\n    heading: 500\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1\n  },\n  fonts: {\n    // serif: 'athelas, georgia, times, serif',\n    sansSerif: '\"Inter\", \"Helvetica\", Arial, sans-serif',\n    mono: 'Monaco, Consolas, \"Lucida Console\", monospace'\n  },\n  buttons: {\n    primary: {\n      position: \"relative\",\n      bg: \"primary\",\n      color: \"white\",\n\n      height: \"auto\",\n      px: 6,\n      py: 3,\n      border: \"none\",\n      borderRadius: \"4px\",\n\n      lineHeight: \"24px\",\n      fontWeight: \"bold\",\n\n      \"&:hover\": {\n        bg: \"text\"\n      }\n    }\n  }\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme} className={\"app\"}>\n      <Box p={8} sx={{ mb: 4 }} width=\"400px\">\n        <Button>I am a styled from the theme!</Button>\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}